"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find @guard

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)
    tasks: [Task!]! @all
    chapters: [Chapter!]! @all
    taskById(id: ID! @eq): Task @find
    TaskByUser(user_id: ID! @eq): [Task!]! @all
    taskByChapter(chapter_id: ID! @eq): [Task!]! @all

}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}


type Task {
    id: ID!
    task:String!
    status: TaskStatus!
    chapter: Chapter! @belongsTo
    user : User! @belongsTo
    created_at: DateTime!
    updated_at: DateTime!
}

enum TaskStatus {
    pending
    in_progress
    completed
}

type Chapter {
    id: ID!
    chapter:String!
    created_at: DateTime!
    updated_at: DateTime!
}


type Mutation {
    login(email: String!, password: String!): AuthPayload!  @field(resolver: "App\\GraphQL\\Mutations\\Login")
    register(input: RegisterInput!): AuthPayload @field(resolver: "App\\GraphQL\\Mutations\\RegisterMutation")
    CreateTask(input: CreateTaskInput!): Task @field(resolver: "App\\GraphQL\\Mutations\\CreateTask") @guard
    UpdateTask(input: CreateTaskInput!): Task @field(resolver: "App\\GraphQL\\Mutations\\UpdateTask") @guard
    DeleteTask(id: ID!): Task @field(resolver: "App\\GraphQL\\Mutations\\DeleteTask")                 @guard
    CreateChapter(input: CreateChapterInput!): Chapter @field(resolver: "App\\GraphQL\\Mutations\\CreateChapter")
    UpdateChapter(input: CreateChapterInput!): Chapter @field(resolver: "App\\GraphQL\\Mutations\\UpdateChapter") @guard
    DeleteChapter(id: ID!): Chapter @field(resolver: "App\\GraphQL\\Mutations\\DeleteChapter") @guard
}

input CreateChapterInput {
    chapter: String!
}

input CreateTaskInput {
    task: String!
    status: TaskStatus!
    chapter_id: ID!
}

type AuthPayload {
    token: String!
    user: User!
    expires_at: String!
}

input RegisterInput {
    name: String!
    email: String!
    password: String!
    password_confirmation: String!
}


